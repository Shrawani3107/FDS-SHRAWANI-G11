#include<stdio.h>
#include<stdlib.h>
struct node
{
  int data;
  struct node *next;
};
  struct node *head,*newnode,*temp,*previous;
  
  
  
 void insertAtFirst()
  {
      newnode=malloc(sizeof(struct node));
      printf("Enter the data at newnode:");
      scanf("%d",&newnode->data);
      if(head==NULL)
      {
          head=newnode;
          newnode->next=NULL;
      }
      else
      {
          newnode->next=head;
          head=newnode;
      }
  }
  
 void deletFirst()
  {
      if(head==NULL)
      printf("empty singly LL\n");
      else
      {
          temp=head;
          head=head->next;
          temp->next=NULL;
          free(temp);
      }
  }
void insertAtLast()
  {
      newnode=malloc(sizeof(struct node));
      printf("Enter the data at newnode:");
      scanf("%d",&newnode->data);
      if(head==NULL)
      {
          head=newnode;
          newnode->next=NULL;
      }
      else
      {
          temp=head;
          while(temp->next!=NULL)
          {
              temp=temp->next;
          }
          temp->next=newnode;
          newnode->next=NULL;
      }
  }
 void deleteLast()
  {
      if(head==NULL)
      printf("empty singly LL\n");
      else if(temp->next==NULL)
      {
          free(head);
          head=NULL;
      }
      else
      {
          temp=head;
          while(temp->next!=NULL)
          {
              previous=temp;
              temp=temp->next;
          }
          previous->next=NULL;
          free(temp);
      } 
  }
  
  void insertAtPosition()
  {
    if(head==NULL)
    {
        newnode=malloc(sizeof(struct node));
        head=newnode;
        printf("List is empty\nEnter the data at first position\n");
        scanf("%d",&head->data);
    }
    else
    {
        int p,c=0;
        printf("Enter the position at which you want to insert newnode:");
        scanf("%d",&p);
        temp=head;
        while(temp->next!=NULL)
        {
            c++;
            temp=temp->next;
        }
        c++;
        if(p<1||p>c)
        {
            printf("Invalid position\n");
        }
        else if(p==1)
        {
            insertAtFirst();
         // newnode=malloc(sizeof(struct node));
          //printf("Enter the data at newnode:");
          //scanf("%d",&newnode->data);    
           //temp=head;
           
           //newnode->next=temp;
           //head=newnode;
          
        }
        else
        {
            newnode=malloc(sizeof(struct node));
            printf("Enter the data at newnode:");
            scanf("%d",&newnode->data);
            temp=head;
            int i=1;
            while(i!=p)
            {
                previous=temp;
                temp=temp->next;
                i++;
            }
            newnode->next=temp;
            previous->next=newnode;
        }
    
    }
      
  }
  
  
  
  void deleteAtPosition()
  {
    if(head==NULL)
    {
        printf("List is empty\n");
       
    }
    else
    {
        int p,c=0;
        printf("Enter the position at which you want to delete newnode:");
        scanf("%d",&p);
        temp=head;
        while(temp->next!=NULL)
        {
            c++;
            temp=temp->next;
        }
        c++;
        if(p<1||p>c)
        {
            printf("Invalid position\n");
        }
        else
        {
            temp=head;
            int i=1;
            
            while(i!=p)
            {
                previous=temp;
                temp=temp->next;
                i++;
            }
            previous->next=temp->next;
            printf("%d deleted",temp->data);
            free(temp);
        }
    
    }
      
  }  
      
  void count()
  {
      int c=0;
      temp=head;
      while(temp->next!=NULL)
        {
            c++;
            temp=temp->next;
        }
        c++;
     printf("total nodes present in SLL are: %d\n",c);    
      
  }
  
  
  void search()
  {
      temp=head;
      int key,c=0;
      printf("\nEnter the key value which you want to search");
      scanf("%d",&key);
      while(temp->next!=NULL)
      {
          temp=temp->next;
      if(temp->data==key)
      {
          c++;
          
          printf("%d is present in LL at %d node",key,c+1);
      }
      }
      
  }
  
  
 
 void display()
  {
      if(head==NULL)
      printf("LL is empty");
      else
      {
   temp=head;
    while(temp!=NULL)
    {
        printf("%d:\t",temp->data);
         printf("%p",*(&temp));
         printf("\n");
        temp=temp->next;
        
    }
      }   
  }
  
  
  
  
void main()
{
   head=NULL;
   int ch,choice;
   printf("-----Singly Linked List-----");
do
    {
        printf("\n1.Insert at first\n");
        printf("2.Delete at first\n");
        printf("3.Insert at last\n");
        printf("4.Delete at last\n");
        printf("5.insert at position\n");
        printf("6.delete at position\n");
        printf("7.count of nodes\n");
        printf("8.search the data in LL\n");
        printf("9.Display\n");
        printf("10.Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch)
        {
        case 1:
            insertAtFirst();
            break;
        case 2:
           deletFirst();
           break;
        case 3:
           insertAtLast();
           break;
        case 4:
           deleteLast();
            break;
        case 5:
           insertAtPosition();
            break;
        case 6:
           deleteAtPosition();
            break;
        case 7:
           count();
            break;    
        case 8:
           search();
            break;        
        case 9:
            display();
            break;
        case 10:
            exit(0);
        
        }

        printf("Do you want to continue?(0/1) ");
        scanf("%d", &choice);

    } while (choice == 1);
}
